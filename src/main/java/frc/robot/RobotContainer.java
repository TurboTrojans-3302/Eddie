// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
//import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static final double MIDDLE_CONE = 28.0;
  private static final double HIGH_CONE = 40.0;
  private static final double MIDDLE_CUBE = 19.0;
  private static final double HIGH_CUBE = 31.0;
  private static final double HUMAN_STATION = 32.0;


  private static RobotContainer m_instance;

  public static RobotContainer getInstance() {
    if (m_instance == null) {
        m_instance = new RobotContainer();
    }

    return m_instance;
  }

  // The robot's subsystems
  public final Arm m_arm = new Arm();
  public final Drivetrain m_drivetrain = new Drivetrain();

  // Joysticks
  private final Joystick armJoystick = new Joystick(1);
  private final XboxController driveController = new XboxController(0);

  public REVDigitBoard revDigitBoard = new REVDigitBoard();
  public REVBlinkinLED m_BlinkinLED = new REVBlinkinLED(RobotMap.BLINKIN_LED_PWM_CHANNEL);

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
    m_instance = this;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Auto Balance", new BalanceOnTheChargingStation(m_drivetrain));
    SmartDashboard.putData("DriveTo(1,0)", new DriveTo(1, 0));
    SmartDashboard.putData("DriveTo(1,1)", new DriveTo(1, 1));
    SmartDashboard.putData("Square Up", new SquareUp(m_drivetrain));
    //SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    //SmartDashboard.putData("TeleOPDrive", new TeleOPDrive( m_drivetrain, m_arm ));
    //SmartDashboard.putData("TestSpeed", new TestSpeed(m_drivetrain));
    //SmartDashboard.putData("TestSetAngle 0", new TestSetAngle(m_drivetrain, 0));
    //SmartDashboard.putData("TestSetAngle 90", new TestSetAngle(m_drivetrain, 90));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();


    m_chooser.setDefaultOption("Do Nothing", new DoNothing());
    m_chooser.addOption("Charging Station", new SimpleBalanceOnChargeStation(m_drivetrain));
    m_chooser.addOption("CrossTheLine", new CrossTheLine());
    m_chooser.addOption("Bump Cube & Cross", new BumpCubeAndCross());
    //SmartDashboard.putData("Auto Mode", m_chooser);
    Shuffleboard.getTab("Tab 1").add("Auto Mode",m_chooser);
    
  }


  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {

    new JoystickButton(armJoystick, 1).onTrue(new ToggleGripper());
    new JoystickButton(armJoystick, 2).onTrue(new ToggleExtension());
    
    //preset Positions (find angles necessary) 
    //human station, change button to a more obvious one
    new JoystickButton(armJoystick, 8).whileTrue(new setArmAngle(HUMAN_STATION, 0.25));
    //cube level 2
    new JoystickButton(armJoystick, 4).whileTrue(new setArmAngle(MIDDLE_CUBE, 0.25));
    //cube level 3
    new JoystickButton(armJoystick, 6).whileTrue(new setArmAngle(HIGH_CUBE, 0.25));

    //cone level 2
    new JoystickButton(armJoystick, 3).whileTrue(new setArmAngle(MIDDLE_CONE, 0.25));
    //cone level 3
    new JoystickButton(armJoystick, 5).whileTrue(new setArmAngle(HIGH_CONE, 0.25));
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getDriveController() {
      return driveController;
    }

public Joystick getArmJoystick() {
        return armJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

