// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.RobotMap;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Arm extends SubsystemBase {

    private Compressor compressor;
    private DoubleSolenoid shoulderValve; 
    private DoubleSolenoid extensionValve;
    private DoubleSolenoid gripperValve;
    private CANSparkMax elbowMotor;
    private CANSparkMax wristMotor;

    /**
    *
    */
    public Arm() {
        compressor = new Compressor(0, PneumaticsModuleType.CTREPCM);
        shoulderValve = new DoubleSolenoid(PneumaticsModuleType.CTREPCM, RobotMap.SHOULDER_VALVE_FWD, RobotMap.SHOULDER_VALVE_BACK);
        extensionValve = new DoubleSolenoid(PneumaticsModuleType.CTREPCM, RobotMap.EXTENSION_VALVE_IN, RobotMap.EXTENSION_VALVE_OUT);
        gripperValve = new DoubleSolenoid(PneumaticsModuleType.CTREPCM, RobotMap.GRIPPER_VALVE_OPEN, RobotMap.GRIPPER_VALVE_CLOSE);

        elbowMotor = new CANSparkMax(RobotMap.ELBOW_MOTOR_ID, MotorType.kBrushless);
        wristMotor = new CANSparkMax(RobotMap.WRIST_MOTOR_ID, MotorType.kBrushless);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void shoulderForward(boolean fwd){
        if (fwd){
            shoulderValve.set(Value.kForward);
        } else {
            shoulderValve.set(Value.kReverse);
        }
        
    }

    public void elbowMove(double speed){
        elbowMotor.set(speed);
    }

    public void extensionOut(boolean extend){
        if (extend){
            shoulderValve.set(Value.kForward);
        } else {
            shoulderValve.set(Value.kReverse);
        }
    }

    public void clawClosed(boolean closed){
        if (closed){
            gripperValve.set(Value.kForward);
        } else {
            gripperValve.set(Value.kReverse);
        }
    }

    public void wristSpin(double speed){
        wristMotor.set(speed);
    }

}

